name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest-cov bandit safety
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,__pycache__,.git
      continue-on-error: true
    
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json || true
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Free disk space
      run: |
        echo "🧹 Freeing up disk space..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get clean
        echo "💾 Disk space after cleanup:"
        df -h
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker image
      run: |
        echo "🔨 Building backend Docker image..."
        docker build -t autonomous-research-backend:test -f Dockerfile .
        echo "✅ Backend build successful!"
        docker images
    
    - name: Check if dashboard exists
      id: check_dashboard
      run: |
        if [ -d "dashboard" ] && [ -f "dashboard/Dockerfile" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ Dashboard directory and Dockerfile found"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ Dashboard directory or Dockerfile not found"
        fi
    
    - name: Build Dashboard Docker image
      if: steps.check_dashboard.outputs.exists == 'true'
      run: |
        echo "🔨 Building dashboard Docker image..."
        docker build -t autonomous-research-dashboard:test -f dashboard/Dockerfile dashboard/
        echo "✅ Dashboard build successful!"
        docker images
      continue-on-error: true
    
    - name: Test Docker Compose
      run: |
        echo "🐳 Testing Docker Compose setup..."
        
        # Check which docker compose command is available
        if docker compose version &> /dev/null; then
          COMPOSE_CMD="docker compose"
          echo "Using 'docker compose' (newer syntax)"
        elif command -v docker-compose &> /dev/null; then
          COMPOSE_CMD="docker-compose"
          echo "Using 'docker-compose' (older syntax)"
        else
          echo "❌ Neither 'docker compose' nor 'docker-compose' found"
          exit 1
        fi
        
        # Build with docker-compose
        echo "📦 Building services with Docker Compose..."
        $COMPOSE_CMD build
        
        # Start services
        echo "🚀 Starting services..."
        $COMPOSE_CMD up -d
        
        # Wait for services to start
        echo "⏳ Waiting for services to start..."
        sleep 25
        
        # Check service status
        echo "📊 Service Status:"
        $COMPOSE_CMD ps
        
        # Show backend logs
        echo ""
        echo "📝 Backend Logs:"
        $COMPOSE_CMD logs backend | tail -30
        
        # Show dashboard logs if it exists
        echo ""
        echo "📝 Dashboard Logs:"
        $COMPOSE_CMD logs dashboard | tail -20 || echo "⚠️ Dashboard logs not available"
        
        # Cleanup
        echo ""
        echo "🧹 Cleaning up..."
        $COMPOSE_CMD down
        
        echo "✅ Docker Compose test completed!"
      continue-on-error: true