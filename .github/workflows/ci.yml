name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest-cov bandit safety
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,__pycache__,.git || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=venv,__pycache__,.git
      continue-on-error: true
    
    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json || true
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker image
      run: |
        echo "üî® Building backend image..."
        docker build -t autonomous-research-backend:test -f Dockerfile .
        echo "‚úÖ Backend build successful!"
    
    - name: Check Dashboard structure
      run: |
        echo "üìÅ Checking dashboard directory..."
        ls -la dashboard/ || echo "‚ö†Ô∏è Dashboard directory not found"
        if [ -f "dashboard/Dockerfile" ]; then
          echo "‚úÖ Dashboard Dockerfile found"
          cat dashboard/Dockerfile
        else
          echo "‚ùå Dashboard Dockerfile not found"
        fi
    
    - name: Build Dashboard Docker image
      run: |
        echo "üî® Building dashboard image..."
        if [ -f "dashboard/Dockerfile" ]; then
          docker build -t autonomous-research-dashboard:test -f dashboard/Dockerfile dashboard/
          echo "‚úÖ Dashboard build successful!"
        else
          echo "‚ö†Ô∏è Skipping dashboard build - Dockerfile not found"
        fi
      continue-on-error: true
    
    - name: Test Docker Compose
      run: |
        echo "üê≥ Testing Docker Compose..."
        # Try docker compose (newer) first, fallback to docker-compose (older)
        if command -v docker &> /dev/null; then
          if docker compose version &> /dev/null; then
            echo "Using 'docker compose' (newer syntax)"
            docker compose build
            docker compose up -d
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Using 'docker-compose' (older syntax)"
            docker-compose build
            docker-compose up -d
            COMPOSE_CMD="docker-compose"
          else
            echo "‚ùå Neither 'docker compose' nor 'docker-compose' found"
            exit 1
          fi
          
          echo "‚è≥ Waiting for services to start..."
          sleep 25
          
          echo "üìä Service Status:"
          $COMPOSE_CMD ps
          
          echo ""
          echo "üìù Backend Logs:"
          $COMPOSE_CMD logs backend | tail -30
          
          echo ""
          echo "üìù Dashboard Logs:"
          $COMPOSE_CMD logs dashboard | tail -20 || echo "‚ö†Ô∏è Dashboard logs not available"
          
          echo ""
          echo "üßπ Cleaning up..."
          $COMPOSE_CMD down
          
          echo "‚úÖ Docker Compose test completed!"
        fi